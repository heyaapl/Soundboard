name: Package and Release

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
      - 'hotfix/**' 
      - 'release/**'
      - '*'  # Allow any branch to trigger builds
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

env:
  GAME_VERSIONS: "5.5.0,11.2.5"  # MOP Classic and Retail

jobs:
  package:
    runs-on: ubuntu-latest
    outputs:
      release-type: ${{ steps.release-type.outputs.RELEASE_TYPE }}
      version: ${{ steps.release-type.outputs.VERSION }}
      is-tagged: ${{ steps.release-type.outputs.IS_TAGGED }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for proper versioning
          submodules: recursive
          
      - name: Determine release type and version
        id: release-type
        run: |
          echo "Branch/Tag: ${{ github.ref_name }}"
          echo "Ref: ${{ github.ref }}"
          
          # Determine release type based on branch and tag
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # Tagged release
            if [[ "${{ github.ref_name }}" == *"alpha"* ]]; then
              RELEASE_TYPE="alpha"
            elif [[ "${{ github.ref_name }}" == *"beta"* ]]; then
              RELEASE_TYPE="beta" 
            else
              RELEASE_TYPE="release"
            fi
            VERSION="${{ github.ref_name }}"
            VERSION="${VERSION#v}"  # Remove v prefix
            IS_TAGGED="true"
          elif [[ "${{ github.ref_name }}" == "main" ]]; then
            # Main branch - release
            RELEASE_TYPE="release"
            VERSION=$(grep "## Version:" Soundboard.toc | sed 's/## Version: //' | xargs)
            IS_TAGGED="false"
          else
            # Feature/develop branches - beta
            RELEASE_TYPE="beta"
            BASE_VERSION=$(grep "## Version:" Soundboard.toc | sed 's/## Version: //' | xargs)
            VERSION="${BASE_VERSION}-beta"
            IS_TAGGED="false"
          fi
          
          echo "RELEASE_TYPE=${RELEASE_TYPE}" >> $GITHUB_OUTPUT
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT  
          echo "IS_TAGGED=${IS_TAGGED}" >> $GITHUB_OUTPUT
          
          echo "🏷️  Release Type: ${RELEASE_TYPE}"
          echo "📦  Version: ${VERSION}"
          echo "🏷️  Is Tagged: ${IS_TAGGED}"
          
      - name: Prepare beta build
        if: steps.release-type.outputs.RELEASE_TYPE == 'beta' && steps.release-type.outputs.IS_TAGGED == 'false'
        run: |
          # Update version in TOC file for beta builds  
          sed -i "s/## Version: .*/## Version: ${{ steps.release-type.outputs.VERSION }}/" Soundboard.toc
          echo "Updated TOC version to: ${{ steps.release-type.outputs.VERSION }}"
          
          # Create beta tag and checkout to it
          BETA_TAG="v${{ steps.release-type.outputs.VERSION }}"
          echo "Creating beta tag: ${BETA_TAG}"
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add Soundboard.toc
          git commit -m "Update version for beta release" || echo "No changes to commit"
          git tag -a "${BETA_TAG}" -m "Beta release from branch ${{ github.ref_name }}"
          git checkout "${BETA_TAG}"
          
          echo "Created and checked out beta tag: ${BETA_TAG}"
          echo "Current tag:"
          git describe --tags --exact-match HEAD 2>/dev/null || echo "Not on a tag"
          
      - name: Package addon
        uses: BigWigsMods/packager@v2
        with:
          args: -g ${{ env.GAME_VERSIONS }} -p 1335953 -n "Soundboard-v${{ steps.release-type.outputs.VERSION }}"
        env:
          CF_API_KEY: ${{ secrets.CF_API_KEY }}
          GITHUB_OAUTH: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Debug packaging results
        if: always()
        run: |
          echo "📦 Packaging completed"
          echo "🔑 CF_API_KEY present: ${{ secrets.CF_API_KEY != '' }}"
          echo "🎯 Game versions: ${{ env.GAME_VERSIONS }}"
          echo "🆔 CurseForge Project ID: 1335953"
          echo "📋 Release type: ${{ steps.release-type.outputs.RELEASE_TYPE }}"
          echo "📝 Version: ${{ steps.release-type.outputs.VERSION }}"
          echo "🔗 Check uploads at: https://www.curseforge.com/wow/addons/soundboard-for-wow/files"
          echo "📁 Working directory contents:"
          ls -la || dir
          echo "📁 Looking for .zip files:"
          find . -name "*.zip" 2>/dev/null || echo "No zip files found"
          
      - name: Create GitHub Release (Tagged releases only)
        if: steps.release-type.outputs.IS_TAGGED == 'true' && steps.release-type.outputs.RELEASE_TYPE == 'release'
        uses: softprops/action-gh-release@v1
        with:
          name: Soundboard v${{ steps.release-type.outputs.VERSION }}
          body: |
            ## Soundboard v${{ steps.release-type.outputs.VERSION }}
            
            🎵 **Event System Update** - Version 1.2.0 introduces automatic sound triggers!
            
            See [CHANGELOG.txt](https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/CHANGELOG.txt) for detailed changes.
            
            ### 📦 Installation
            1. Download the latest release
            2. Extract to your WoW AddOns folder  
            3. Restart World of Warcraft
            
            ### 🎮 Supported Versions
            - **Mists of Pandaria Classic** (5.5.0) 
            - **World of Warcraft Retail** (11.2.5+)
            
            ### 📥 Download
            Available on [CurseForge](https://www.curseforge.com/wow/addons/soundboard-for-wow)
            
            ### 🎯 New Features
            - **9 Event Types** for automatic sound triggers
            - **Dedicated Event Manager UI** with intuitive creation wizard
            - **Local vs Broadcast** options for each event
            - **Smart Edge Detection** to prevent duplicate triggers
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
  build-summary:
    runs-on: ubuntu-latest
    needs: package
    if: always()
    
    steps:
      - name: Build Summary
        run: |
          echo "## 📦 Soundboard Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch/Tag:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Release Type:** ${{ needs.package.outputs.release-type || '❓ Unknown' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.package.outputs.version || '❓ Unknown' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Target Versions:** MOP 5.5.0, Retail 11.2.5+" >> $GITHUB_STEP_SUMMARY
          echo "**CurseForge Project:** 1335953 (soundboard-for-wow)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.package.result }}" == "success" ]]; then
            echo "### ✅ Build Status: Success" >> $GITHUB_STEP_SUMMARY
            
            if [[ "${{ github.ref_name }}" == "main" ]] || [[ "${{ github.ref }}" == refs/tags/* ]]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "🚀 **Release build** - Available on [CurseForge](https://www.curseforge.com/wow/addons/soundboard-for-wow)" >> $GITHUB_STEP_SUMMARY
            else
              echo "" >> $GITHUB_STEP_SUMMARY  
              echo "🧪 **Beta build** - Available on [CurseForge](https://www.curseforge.com/wow/addons/soundboard-for-wow) for testing" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "### ❌ Build Status: Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Check the package job logs for details." >> $GITHUB_STEP_SUMMARY
          fi
